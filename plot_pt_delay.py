#!/usr/bin/env python3
"""
Plot mean schedule-delay delta (mixed - baseline) versus private-traffic value.

Assumptions:
- You have outputs/analysis/pt_delay.xlsx generated by export_pt_delay_excel.py
- The summary sheet contains columns: value, mean_delta_s
- X-axis uses 2 * value (zone2->1 + zone3->1)
- Log scale (symlog) on Y to handle zero/negative gracefully

This script now saves a single combined figure to --out containing:
- Subplot 1: line plot of mean delay delta vs effective private-traffic value
- Subplot 2: heat-curve band using rolling mean ± rolling std (window=3)
Additionally, it outputs a percentile fan chart, a per-value box plot image,
and a separate figure with three curves (mean, min, max) vs effective value.

It also optionally saves a standalone heat-curve image if --out-heat is given
or will default to <out>_heat.<ext> when not provided.

Usage:
  python plot_pt_delay.py --excel outputs/analysis/pt_delay.xlsx \
                          --out outputs/analysis/pt_delay.png \
                          --out-heat outputs/analysis/pt_delay_heat.png
"""

import argparse
import os
import pandas as pd
import matplotlib.pyplot as plt


def main() -> None:
    ap = argparse.ArgumentParser()
    ap.add_argument("--excel", required=True, help="Path to pt_delay.xlsx")
    ap.add_argument("--out", required=True, help="Output image path (e.g., PNG)")
    ap.add_argument("--out-heat", required=False, help="Output path for heat-curve style plot")
    ap.add_argument("--out-fan", required=False, help="Output path for percentile fan chart")
    ap.add_argument("--out-box", required=False, help="Output path for per-value box plot")
    ap.add_argument("--out-range", required=False, help="Output path for mean/min/max curves figure")
    args = ap.parse_args()

    if not os.path.exists(args.excel):
        raise SystemExit(f"Excel not found: {args.excel}")

    xls = pd.ExcelFile(args.excel)
    if "summary" not in xls.sheet_names:
        raise SystemExit("summary sheet not found in Excel")

    df = pd.read_excel(args.excel, sheet_name="summary")
    if not {"value", "mean_delta_s"}.issubset(df.columns):
        raise SystemExit("summary sheet missing required columns: value, mean_delta_s")

    df = df.sort_values("value").copy()
    df["effective_value"] = df["value"] * 2  # account for two flows

    # Heat-band uses rolling mean ± std (original method)
    df_roll = df[["effective_value", "mean_delta_s"]].copy()
    mean_roll = df_roll["mean_delta_s"].rolling(window=3, min_periods=1, center=True).mean()
    std_roll = df_roll["mean_delta_s"].rolling(window=3, min_periods=1, center=True).std().fillna(0)
    lower_env_roll = mean_roll - std_roll
    upper_env_roll = mean_roll + std_roll

    # For fan chart only: prefer p10/p90 from summary; else compute per sheet
    if {"p10_delta_s", "p90_delta_s"}.issubset(df.columns):
        p10_series = df["p10_delta_s"]
        p90_series = df["p90_delta_s"]
    else:
        value_to_p10 = {}
        value_to_p90 = {}
        for sheet in xls.sheet_names:
            if sheet == "summary":
                continue
            try:
                v = int(sheet)
            except Exception:
                continue
            try:
                s = pd.read_excel(args.excel, sheet_name=sheet)
            except Exception:
                continue
            if "delay_delta_s" not in s.columns or len(s) == 0:
                continue
            q = s["delay_delta_s"].quantile([0.1, 0.9])
            value_to_p10[v] = float(q.loc[0.1])
            value_to_p90[v] = float(q.loc[0.9])
        p10_series = df["value"].map(value_to_p10)
        p90_series = df["value"].map(value_to_p90)
    has_p10p90 = p10_series.notna().all() and p90_series.notna().all()

    if has_p10p90:
        lower_env = p10_series
        upper_env = p90_series
        mean_series = df["mean_delta_s"]
        band_title = "Robustness band: p10–p90 envelope"
    elif {"min_delta_s", "max_delta_s"}.issubset(df.columns):
        lower_env = df["min_delta_s"]
        upper_env = df["max_delta_s"]
        mean_series = df["mean_delta_s"]
        band_title = "Robustness band: min–max envelope"
    else:
        # Fallback: rolling mean ± std (window=3)
        df_roll = df[["effective_value", "mean_delta_s"]].copy()
        mean_series = df_roll["mean_delta_s"].rolling(window=3, min_periods=1, center=True).mean()
        std_series = df_roll["mean_delta_s"].rolling(window=3, min_periods=1, center=True).std().fillna(0)
        lower_env = mean_series - std_series
        upper_env = mean_series + std_series
        band_title = "Robustness band: rolling mean ± std"

    # Combined figure with two subplots
    fig, axs = plt.subplots(2, 1, figsize=(8, 10), sharex=True)

    # Subplot 1: line plot
    axs[0].plot(df["effective_value"], df["mean_delta_s"], marker="o")
    axs[0].set_ylabel("Mean delay delta (s)")
    axs[0].set_yscale("symlog", linthresh=1)
    axs[0].grid(True, which="both", linestyle=":", alpha=0.6)
    axs[0].set_title("Delay vs Private OD volume")

    # Subplot 2: heat-curve (rolling mean ± std)
    axs[1].plot(df["effective_value"], mean_roll, color="#1f77b4")
    axs[1].fill_between(df["effective_value"], lower_env_roll, upper_env_roll, color="#1f77b4", alpha=0.2)
    axs[1].set_xlabel("Private OD volume (effective, zone2->1 + zone3->1)")
    axs[1].set_ylabel("Mean delay delta (s)")
    axs[1].set_yscale("symlog", linthresh=1)
    axs[1].grid(True, which="both", linestyle=":", alpha=0.6)
    axs[1].set_title("Heat-curve: rolling mean ± std")

    fig.tight_layout()
    fig.savefig(args.out, dpi=150)
    print(f"Combined plot saved: {args.out}")

    # Also save a standalone heat-curve image for convenience/backward-compat
    out_heat = args.out_heat
    if not out_heat:
        root, ext = os.path.splitext(args.out)
        out_heat = root + "_heat" + (ext or ".png")

    plt.figure(figsize=(8, 6))
    plt.plot(df["effective_value"], mean_roll, color="#1f77b4")
    plt.fill_between(df["effective_value"], lower_env_roll, upper_env_roll, color="#1f77b4", alpha=0.2)
    plt.xlabel("Private OD volume (effective, zone2->1 + zone3->1)")
    plt.ylabel("Mean delay delta (s)")
    plt.yscale("symlog", linthresh=1)
    plt.grid(True, which="both", linestyle=":", alpha=0.6)
    plt.tight_layout()
    plt.savefig(out_heat, dpi=150)
    print(f"Heat-curve plot saved: {out_heat}")

    # Mean/Min/Max curves figure
    out_range = args.out_range
    if not out_range:
        root, ext = os.path.splitext(args.out)
        out_range = root + "_range" + (ext or ".png")

    # Try to use summary min/max, else compute per sheet
    if {"min_delta_s", "max_delta_s"}.issubset(df.columns):
        min_series = df["min_delta_s"]
        max_series = df["max_delta_s"]
    else:
        value_to_min = {}
        value_to_max = {}
        for sheet in xls.sheet_names:
            if sheet == "summary":
                continue
            try:
                v = int(sheet)
            except Exception:
                continue
            s = pd.read_excel(args.excel, sheet_name=sheet)
            if "delay_delta_s" not in s.columns or len(s) == 0:
                continue
            value_to_min[v] = float(s["delay_delta_s"].min())
            value_to_max[v] = float(s["delay_delta_s"].max())
        min_series = df["value"].map(value_to_min)
        max_series = df["value"].map(value_to_max)

    plt.figure(figsize=(8, 6))
    x = df["effective_value"]
    plt.plot(x, df["mean_delta_s"], label="mean", color="#1f77b4", linewidth=2)
    plt.plot(x, max_series, label="max", color="#d62728", linestyle="--")
    plt.plot(x, min_series, label="min", color="#2ca02c", linestyle=":")
    plt.yscale("symlog", linthresh=1)
    plt.xlabel("Private OD volume (effective, zone2->1 + zone3->1)")
    plt.ylabel("Delay delta (s)")
    plt.grid(True, which="both", linestyle=":", alpha=0.6)
    plt.legend()
    plt.tight_layout()
    plt.savefig(out_range, dpi=150)
    print(f"Mean/Min/Max curves saved: {out_range}")

    # Percentile fan chart (p10, p25, p50, p75, p90 when present)
    out_fan = args.out_fan
    if not out_fan:
        root, ext = os.path.splitext(args.out)
        out_fan = root + "_fan" + (ext or ".png")

    plt.figure(figsize=(8, 6))
    x = df["effective_value"]
    have_p25p75 = {"p25_delta_s", "p75_delta_s"}.issubset(df.columns)
    p10 = p10_series
    p90 = p90_series
    p50 = df["median_delta_s"] if "median_delta_s" in df.columns else df["mean_delta_s"]
    if have_p25p75:
        p25 = df["p25_delta_s"]
        p75 = df["p75_delta_s"]
        plt.fill_between(x, p10, p90, color="#1f77b4", alpha=0.10, label="p10–p90")
        plt.fill_between(x, p25, p75, color="#1f77b4", alpha=0.20, label="p25–p75")
    else:
        plt.fill_between(x, p10, p90, color="#1f77b4", alpha=0.15, label="p10–p90")
    plt.plot(x, p50, color="#1f77b4", linewidth=2, label="median")
    plt.yscale("symlog", linthresh=1)
    plt.xlabel("Private OD volume (effective, zone2->1 + zone3->1)")
    plt.ylabel("Delay delta (s)")
    plt.grid(True, which="both", linestyle=":", alpha=0.6)
    plt.legend()
    plt.tight_layout()
    plt.savefig(out_fan, dpi=150)
    print(f"Percentile fan chart saved: {out_fan}")

    # Per-value box plot (uses per-sheet data; may be slower)
    out_box = args.out_box
    if not out_box:
        root, ext = os.path.splitext(args.out)
        out_box = root + "_box" + (ext or ".png")

    # Build a compact dataset for selected values to keep speed reasonable
    selected_values = df["value"].unique().tolist()
    # If many values, sample up to 12 evenly spaced ones
    if len(selected_values) > 12:
        idxs = list(range(0, len(selected_values), max(1, len(selected_values)//12)))[:12]
        selected_values = [selected_values[i] for i in idxs]

    data = []
    labels = []
    for v in selected_values:
        sheet_name = str(int(v))
        if sheet_name not in xls.sheet_names:
            continue
        s = pd.read_excel(args.excel, sheet_name=sheet_name)
        if "delay_delta_s" not in s.columns or len(s) == 0:
            continue
        data.append(s["delay_delta_s"].values)
        labels.append(str(int(v*2)))  # x label in effective_value units

    if data:
        plt.figure(figsize=(max(8, len(data)), 6))
        # Matplotlib >=3.9 uses 'tick_labels' instead of deprecated 'labels'
        plt.boxplot(data, tick_labels=labels, showfliers=False)
        plt.yscale("symlog", linthresh=1)
        plt.xlabel("Private OD volume (effective)")
        plt.ylabel("Delay delta (s)")
        plt.grid(True, which="both", linestyle=":", alpha=0.6)
        plt.tight_layout()
        plt.savefig(out_box, dpi=150)
        print(f"Per-value box plot saved: {out_box}")


if __name__ == "__main__":
    main()


